<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Credentials SellerAmp</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }
        .main-content {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 20px;
        }
        .header {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            text-align: center;
        }
        .credentials-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .form-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        .status-working {
            color: #28a745;
            font-weight: bold;
        }
        .status-striked {
            color: #dc3545;
            font-weight: bold;
        }
        .proxy-status {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .proxy-working {
            background-color: #28a745;
        }
        .proxy-failed {
            background-color: #dc3545;
        }
        .proxy-unknown {
            background-color: #6c757d;
        }
        .btn {
            padding: 8px 16px;
            margin: 2px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        .btn-success {
            background-color: #28a745;
            color: white;
        }
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }
        .btn-warning {
            background-color: #ffc107;
            color: black;
        }
        .btn-test {
            background-color: #17a2b8;
            color: white;
        }
        .btn-info {
            background-color: #17a2b8;
            color: white;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .form-row {
            display: flex;
            gap: 15px;
        }
        .form-row .form-group {
            flex: 1;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar', { currentPage: 'credentials' }) %>

    <div class="main-content">
        <div class="header">
            <h1>üîê Gestion des Credentials SellerAmp</h1>
            <p>G√©rez les comptes SellerAmp utilis√©s par l'API</p>
        </div>

        <div class="credentials-container">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h2>Liste des Comptes</h2>
                <button class="btn btn-success" onclick="openModal('add')">Ajouter un Credential</button>
            </div>
            
            <table id="credentialsTable">
                <thead>
                    <tr>
                        <th>Login</th>
                        <th>IP Proxy</th>
                        <th>Port</th>
                        <th>Status Compte</th>
                        <th>Status Proxy</th>
                        <th>Utilisations</th>
                        <th>Derni√®re utilisation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% credentials.forEach(credential => { %>
                    <tr>
                        <td><%= credential.login %></td>
                        <td><%= credential.ip || 'N/A' %></td>
                        <td><%= credential.port || 'N/A' %></td>
                        <td><span class="status-<%= credential.status %>"><%= credential.status %></span></td>
                        <td title="<%= credential.proxy_status || 'unknown' %>">
                            <% if (credential.ip && credential.port) { %>
                                <span class="proxy-status proxy-<%= credential.proxy_status || 'unknown' %>"></span>
                            <% } else { %>
                                <span class="text-muted">N/A</span>
                            <% } %>
                        </td>
                        <td><%= credential.countused %></td>
                        <td><%= credential.lastdateused ? new Date(credential.lastdateused).toLocaleString('fr-FR') : 'Jamais' %></td>
                        <td>
                            <button class="btn btn-warning" data-id="<%= credential.id %>" data-login="<%= credential.login %>" data-status="<%= credential.status %>" data-ip="<%= credential.ip || '' %>" data-port="<%= credential.port || '' %>" onclick="editCredentialFromButton(this)">√âditer</button>
                            <button class="btn btn-danger" onclick="deleteCredential(<%= credential.id %>)">Supprimer</button>
                            <button class="btn btn-test" onclick="testCredential(<%= credential.id %>)">Tester Compte</button>
                            <% if (credential.ip && credential.port) { %>
                            <button class="btn btn-info" onclick="testProxy(<%= credential.id %>)">Tester Proxy</button>
                            <% } %>
                        </td>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>

        <!-- Modal pour ajouter/√©diter -->
        <div id="credentialModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <h3 id="modalTitle">Ajouter un Credential</h3>
                <form id="credentialForm">
                    <input type="hidden" id="credentialId" name="id">
                    <div class="form-group">
                        <label for="login">Login (Email):</label>
                        <input type="email" id="login" name="login" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Mot de passe:</label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="status">Status:</label>
                        <select id="status" name="status">
                            <option value="working">Working</option>
                            <option value="striked">Striked</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="ip">IP Proxy:</label>
                        <input type="text" id="ip" name="ip">
                    </div>
                    <div class="form-group">
                        <label for="port">Port:</label>
                        <input type="text" id="port" name="port">
                    </div>
                    <button type="submit" class="btn btn-primary">Sauvegarder</button>
                    <button type="button" class="btn btn-danger" onclick="closeModal()">Annuler</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        function openModal(mode, id = null, login = '', status = 'working', ip = '', port = '') {
            const modal = document.getElementById('credentialModal');
            const form = document.getElementById('credentialForm');
            const title = document.getElementById('modalTitle');
            
            if (mode === 'add') {
                title.textContent = 'Ajouter un Credential';
                form.reset();
                document.getElementById('credentialId').value = '';
            } else {
                title.textContent = '√âditer un Credential';
                document.getElementById('credentialId').value = id;
                document.getElementById('login').value = login;
                document.getElementById('status').value = status;
                document.getElementById('password').value = '';
                document.getElementById('password').placeholder = 'Laisser vide pour ne pas changer';
                document.getElementById('password').required = false;
                document.getElementById('ip').value = ip;
                document.getElementById('port').value = port;
            }
            
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('credentialModal').style.display = 'none';
            document.getElementById('password').required = true;
            document.getElementById('password').placeholder = '';
        }

        function editCredential(id, login, status, ip, port) {
            openModal('edit', id, login, status, ip, port);
        }

        function editCredentialFromButton(button) {
            const id = button.getAttribute('data-id');
            const login = button.getAttribute('data-login');
            const status = button.getAttribute('data-status');
            const ip = button.getAttribute('data-ip');
            const port = button.getAttribute('data-port');
            openModal('edit', id, login, status, ip, port);
        }

        async function deleteCredential(id) {
            if (confirm('√ätes-vous s√ªr de vouloir supprimer ce credential ?')) {
                try {
                    const response = await fetch(`/api/credentials/${id}`, {
                        method: 'DELETE'
                    });
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Erreur lors de la suppression');
                    }
                } catch (error) {
                    alert('Erreur de connexion');
                }
            }
        }

        async function testCredential(id) {
            if (confirm('Voulez-vous tester ce credential sur SellerAmp ?')) {
                // Afficher un indicateur de chargement
                const button = document.querySelector(`button[onclick="testCredential(${id})"]`);
                const originalText = button.textContent;
                button.textContent = 'Test en cours...';
                button.disabled = true;
                
                try {
                    const response = await fetch(`/api/testcredentials`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ credentialId: id })
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        if (result.success) {
                            alert(`Test r√©ussi ! Status mis √† jour: ${result.newStatus}`);
                        } else {
                            alert(`Test √©chou√©: ${result.error}`);
                        }
                    } else {
                        alert('Erreur lors du test: ' + result.error);
                    }
                    
                    // Rafra√Æchir la page pour afficher le nouveau statut
                    location.reload();
                    
                } catch (error) {
                    alert('Erreur de connexion lors du test');
                    // Restaurer le bouton en cas d'erreur
                    button.textContent = originalText;
                    button.disabled = false;
                }
            }
        }

        async function testProxy(id) {
            if (confirm('Voulez-vous tester la connexion proxy pour ce credential ?')) {
                // Afficher un indicateur de chargement
                const button = document.querySelector(`button[onclick="testProxy(${id})"]`);
                const originalText = button.textContent;
                button.textContent = 'Test en cours...';
                button.disabled = true;
                
                try {
                    const response = await fetch(`/api/testproxy`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ credentialId: id })
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        if (result.success) {
                            alert(`Test proxy r√©ussi !\nIP d√©tect√©e: ${result.detectedIp}\nPays: ${result.country || 'N/A'}\nTemps de r√©ponse: ${result.responseTime}ms`);
                        } else {
                            alert(`Test proxy √©chou√©: ${result.error}`);
                        }
                    } else {
                        alert('Erreur lors du test proxy: ' + result.error);
                    }
                    
                    // Rafra√Æchir la page pour afficher le nouveau statut
                    location.reload();
                    
                } catch (error) {
                    alert('Erreur de connexion lors du test proxy');
                    // Restaurer le bouton en cas d'erreur
                    button.textContent = originalText;
                    button.disabled = false;
                }
            }
        }

        document.getElementById('credentialForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            const isEdit = data.id !== '';
            const url = isEdit ? `/api/credentials/${data.id}` : '/api/credentials';
            const method = isEdit ? 'PUT' : 'POST';
            
            // Si c'est une √©dition et que le mot de passe est vide, on ne l'envoie pas
            if (isEdit && !data.password) {
                delete data.password;
            }
            
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                if (response.ok) {
                    closeModal();
                    location.reload();
                } else {
                    const error = await response.json();
                    alert('Erreur: ' + error.error);
                }
            } catch (error) {
                alert('Erreur de connexion');
            }
        });

        // Fermer le modal en cliquant √† l'ext√©rieur
        window.onclick = function(event) {
            const modal = document.getElementById('credentialModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html> 